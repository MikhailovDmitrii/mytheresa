// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/product/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/product/service.go -destination=./internal/mocks/product/service.go
//

// Package mock_product is a generated GoMock package.
package mock_product

import (
	product "mytheresa-promotions/internal/product"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockService) BulkCreate(products []*product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", products)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockServiceMockRecorder) BulkCreate(products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockService)(nil).BulkCreate), products)
}

// Delete mocks base method.
func (m *MockService) Delete(sku string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(sku any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), sku)
}

// FindBySku mocks base method.
func (m *MockService) FindBySku(sku string) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySku", sku)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySku indicates an expected call of FindBySku.
func (mr *MockServiceMockRecorder) FindBySku(sku any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySku", reflect.TypeOf((*MockService)(nil).FindBySku), sku)
}

// GetWithPromotions mocks base method.
func (m *MockService) GetWithPromotions(category string, priceLessThan int) ([]*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPromotions", category, priceLessThan)
	ret0, _ := ret[0].([]*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithPromotions indicates an expected call of GetWithPromotions.
func (mr *MockServiceMockRecorder) GetWithPromotions(category, priceLessThan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPromotions", reflect.TypeOf((*MockService)(nil).GetWithPromotions), category, priceLessThan)
}

// Update mocks base method.
func (m *MockService) Update(p *product.Product) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", p)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), p)
}
