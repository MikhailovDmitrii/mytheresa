// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infra/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/infra/repository.go -destination=./internal/mocks/infra/repository.go
//

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	infra "mytheresa-promotions/internal/infra"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(products []*infra.Product) ([]*infra.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", products)
	ret0, _ := ret[0].([]*infra.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), products)
}

// Delete mocks base method.
func (m *MockRepository) Delete(sku string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(sku any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), sku)
}

// GetBySku mocks base method.
func (m *MockRepository) GetBySku(sku string) (*infra.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySku", sku)
	ret0, _ := ret[0].(*infra.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySku indicates an expected call of GetBySku.
func (mr *MockRepositoryMockRecorder) GetBySku(sku any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySku", reflect.TypeOf((*MockRepository)(nil).GetBySku), sku)
}

// Search mocks base method.
func (m *MockRepository) Search(category string, priceLessThan, limit int) ([]*infra.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", category, priceLessThan, limit)
	ret0, _ := ret[0].([]*infra.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRepositoryMockRecorder) Search(category, priceLessThan, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), category, priceLessThan, limit)
}

// Update mocks base method.
func (m *MockRepository) Update(p *infra.Product) (*infra.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", p)
	ret0, _ := ret[0].(*infra.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), p)
}
